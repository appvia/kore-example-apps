name: Build, Push and Deploy dotnet-hello-world application
on:
  push:
    branches:
      - main
    paths:
    - 'dotnet-hello-world/**'
  pull_request:
    branches:
      - main
    paths:
    - 'dotnet-hello-world/**'
jobs:
  build_push_deploy:
    runs-on: ubuntu-latest
    steps:
      - name: Get branch name
        if: github.event_name != 'pull_request'
        run: echo "BRANCH_NAME=$(echo ${GITHUB_REF#refs/heads/})" >> $GITHUB_ENV

      - name: Get branch name on pull request
        if: github.event_name == 'pull_request'
        run: echo "BRANCH_NAME=$(echo ${GITHUB_HEAD_REF#refs/heads/})" >> $GITHUB_ENV

      - name: Checkout repository
        uses: actions/checkout@v2

      - name: Build an image from Dockerfile
        run: |
          docker build -t docker.io/appvia/kore-example-apps:${{ github.sha }} .
        working-directory: dotnet-hello-world

      - name: Run Trivy vulnerability scanner
        uses: aquasecurity/trivy-action@master
        with:
          image-ref: 'docker.io/appvia/kore-example-apps:${{ github.sha }}'
          format: 'template'
          template: '@/contrib/sarif.tpl'
          output: 'trivy-results.sarif'
          ignore-unfixed: true
          severity: 'CRITICAL'
          exit-code: '1'

      - name: Upload Trivy scan results to GitHub Security tab
        uses: github/codeql-action/upload-sarif@v1
        with:
          sarif_file: 'trivy-results.sarif'

      - name: Download Kore CLI
        run: |
          sudo curl https://storage.googleapis.com/kore-releases/v0.4.0-beta9/kore-cli-linux-amd64 -o /usr/local/bin/kore
          sudo chmod +x /usr/local/bin/kore

      - name: Trigger Kore build and push
        env:
          KORE_SERVER: ${{ secrets.KORE_SERVER }}
          KORE_TEAM: ${{ secrets.KORE_TEAM }}
          KORE_TOKEN: ${{ secrets.DOTNET_KORE_TOKEN }}
        run: |
          echo "Running build from $BRANCH_NAME branch"
          kore run build dotnet-hello-world -t "$KORE_TEAM" -b "$BRANCH_NAME" --tag ${{ github.sha }}

      - name: Get Certificate Authority for Helm to trust the Kubernetes API server
        run: |
          echo "$CA_CERT" > /tmp/ca
          echo "SSL_CERT_FILE=/tmp/ca" >> $GITHUB_ENV
        env:
          CA_CERT: ${{secrets.CA_CERT}}

      - name: Install stable version of Helm
        uses: azure/setup-helm@v1

      - name: Create Helm release
        env:
          HELM_KUBEAPISERVER: ${{ secrets.HELM_KUBEAPISERVER }}
          HELM_KUBETOKEN: ${{ secrets.HELM_KUBETOKEN }}
          HELM_NAMESPACE: ${{ secrets.HELM_NAMESPACE }}
          IMAGE_REPOSITORY: ${{ secrets.HELM_IMAGE_REPOSITORY }}
        run: helm upgrade dotnet-hello-world dotnet-hello-world/charts/dotnet-hello-world \
          --install \
          --set image.repository="$IMAGE_REPOSITORY" \
          --set image.tag=${{ github.sha }}

  static_code_analysis:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout source code
        uses: actions/checkout@v2
        with:
          fetch-depth: 0

      - name: Setup dotnet core
        uses: actions/setup-dotnet@v1

      - name: Run Unit Tests and Code Coverage
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          SONAR_TOKEN: ${{ secrets.SONAR_TOKEN }}
        run: |
          dotnet tool install --global dotnet-sonarscanner --version 5.0.4
          dotnet-sonarscanner begin \
            /k:"appvia_kore-example-apps" \
            /o:"appvia" \
            /d:sonar.host.url="https://sonarcloud.io" \
            /d:sonar.login="$SONAR_TOKEN" \
            /d:sonar.sources="dotnet-hello-world/src" \
            /d:sonar.tests="dotnet-hello-world/tests" \
            /d:sonar.cs.opencover.reportsPaths="results/*/coverage.opencover.xml"
          dotnet build dotnet-hello-world/src
          dotnet test dotnet-hello-world/tests --collect:"XPlat Code Coverage" --results-directory results -- DataCollectionRunSettings.DataCollectors.DataCollector.Configuration.Format=opencover
          dotnet-sonarscanner end /d:sonar.login="$SONAR_TOKEN"
